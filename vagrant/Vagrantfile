# -*- mode: ruby -*-
# vi: set ft=ruby :

# Ensure this Project is for Virtualbox Provider
ENV['VAGRANT_DEFAULT_PROVIDER'] = "virtualbox"

Vagrant.configure("2") do |config|
  # Base configuration for all VMs

  # Set up synced folders
  config.vm.synced_folder ".", "/vagrant"

  # Individual VM configurations
  # Firewall Server VM
  config.vm.define "fw_server" do |fw_config|
    fw_config.vm.box = "ubuntu/focal64"
    fw_config.vm.hostname = "a31-MediTrack-firewall-server"
    # fw_config.vm.network "public_network", type: "static", ip: "192.168.2.10"
    fw_config.vm.network "private_network", type: "static", ip: "192.168.2.10", virtualbox__intnet: "sw-0", auto_config: false

    # VM name
    fw_config.vm.provider "virtualbox" do |vb|
      vb.gui = false #? Test true
      vb.name = "a31-MediTrack-firewall-server"
    end

    # Public network
    # fw_config.vm.network "public_network", type: "static", ip: "192.168.2.10", virtualbox__intnet: "sw-"

    # Internal Network sw-1
    fw_config.vm.network "private_network", type: "static", ip: "192.168.0.10", virtualbox__intnet: "sw-1", auto_config: false
    # Enable Promiscuous Mode for sw-1
    fw_config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end

    # Internal Network sw-2
    fw_config.vm.network "private_network", type: "static", ip:"192.168.1.10", virtualbox__intnet: "sw-2", auto_config: false
    # Enable Promiscuous Mode for sw-2
    fw_config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    fw_config.vm.provision "shell" do |shell|
      shell.inline = <<-SHELL
        # Do necessary installations
        sudo apt update
        echo "iptables-persistent iptables-persistent/autosave_v4 boolean true" | sudo debconf-set-selections
        echo "iptables-persistent iptables-persistent/autosave_v6 boolean true" | sudo debconf-set-selections
        sudo apt install -y iptables-persistent
        sudo apt install -y net-tools

        # Ensure script has correct line endings for unix
        sudo apt install dos2unix && dos2unix /vagrant/init-scripts/init-fw-server.sh

        # Run initial setup script
        sudo chmod +x /vagrant/init-scripts/init-fw-server.sh
        /bin/sh /vagrant/init-scripts/init-fw-server.sh
      SHELL
    end
  end

  # Application Server VM
  config.vm.define "app_server" do |app_config|
    app_config.vm.box = "ubuntu/focal64"
    app_config.vm.hostname = "a31-MediTrack-app-server"

    # VM name
    app_config.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.name = "a31-MediTrack-app-server"
    end

    # Create shared folder for compiling app server code.
    app_config.vm.synced_folder "../MediTrack", "/MediTrack"

    # Internal Network sw-1
    app_config.vm.network "private_network", type: "static", ip: "192.168.0.20", virtualbox__intnet: "sw-1", auto_config: false
    # Enable Promiscuous Mode for sw-1
    app_config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end

    app_config.vm.provision "shell" do |shell|
      shell.inline = <<-SHELL
        # Do necessary installations
        # TODO: see this
        #mv /vagrant/installers/dotnet-install.sh .
        wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
        chmod +x ./dotnet-install.sh
        /bin/bash ./dotnet-install.sh --version latest --install-dir /usr/local/bin

        # Ensure script has correct line endings for unix
        sudo apt install dos2unix && dos2unix /vagrant/init-scripts/init-app-server.sh

        # Run the initial setup script
        sudo chmod +x /vagrant/init-scripts/init-app-server.sh
        /bin/sh /vagrant/init-scripts/init-app-server.sh

        # Change to the MediTrack directory, publish the .NET program, and change back to the parent directory
        # cd /MediTrack/MediTrackBackend && dotnet publish -o ../../MediTrackApp && dotnet restore && cd ../..

        echo "export DOTNET_ROOT=/usr/local/bin" >> /home/vagrant/.bashrc
        echo "export PATH=$PATH:$DOTNET_ROOT" >> /home/vagrant/.bashrc

        # Start running the program
        # screen -S server -dm /MediTrackApp/MediTrackBackend

      SHELL
    end
  end

  # Database Server VM
  # Issues with database creation
  config.vm.define "db_server" do |db_config|
    db_config.vm.box = "ubuntu/focal64"
    db_config.vm.hostname = "a31-MediTrack-db-server"

    # VM name
    db_config.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.name = "a31-MediTrack-db-server"
    end

    # Create shared folder for populating database
    db_config.vm.synced_folder "../MediTrack", "/MediTrack"

    # Internal Network sw-2
    db_config.vm.network "private_network", type: "static", ip: "192.168.1.30", virtualbox__intnet: "sw-2", auto_config: false#, adapter: 1
    # Enable Promiscuous Mode for sw-2
    db_config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--nicpromisc1", "allow-all"]
    end

    # TODO: CLEAN UP script, move as much as possible to a separate file
    db_config.vm.provision "shell" do |shell|
      shell.inline = <<-SHELL
        # Ensure script has correct line endings for unix
        sudo apt install dos2unix && dos2unix /vagrant/init-scripts/init-db-server.sh #!

        # Set the MySQL root password in advance
        export DEBIAN_FRONTEND=noninteractive # for debconf
        # Set the MySQL root password in advance
        # echo "mysql-community-server mysql-community-server/data-dir select ''" | sudo debconf-set-selections
        # echo "mysql-community-server mysql-community-server/root-pass password root" | sudo debconf-set-selections
        # echo "mysql-community-server mysql-community-server/re-root-pass password root" | sudo debconf-set-selections

        # # Set the default authentication plugin in advance
        echo "mysql-community-server mysql-server/default-auth-override select Use Strong Password Encryption (RECOMMENDED)" | sudo debconf-set-selections

        #! Seems like something here works, cause i only had to provide "YES" to secure something mode
        # mkdir mysql-installers && tar -xvf /vagrant/installers/mysql-server_8.0.35-1ubuntu20.04_amd64.deb-bundle.tar -C mysql-installers
        # sudo cp /vagrant/installers/libmecab2_0.996-10build1_amd64.deb mysql-installers
        # # Installing mysql and all dependencies
        # cd mysql-installers && sudo dpkg -i libmecab2_0.996-10build1_amd64.deb && sudo dpkg -i mysql-common_8.0.35-1ubuntu20.04_amd64.deb && sudo dpkg -i mysql-community-client-plugins_8.0.35-1ubuntu20.04_amd64.deb && sudo dpkg -i mysql-community-client-core_8.0.35-1ubuntu20.04_amd64.deb && sudo dpkg -i mysql-community-client_8.0.35-1ubuntu20.04_amd64.deb && sudo dpkg -i mysql-client_8.0.35-1ubuntu20.04_amd64.deb && sudo dpkg -i mysql-community-server-core_8.0.35-1ubuntu20.04_amd64.deb && sudo dpkg -i mysql-community-server_8.0.35-1ubuntu20.04_amd64.deb

        sudo apt install mysql-server -y
        sudo service mysql start

        # Set up MySQL user, and run init.sql to create database and tables
        mysql -uroot -p'root' < /vagrant/database-setup/create-user.sql
        mysql -umysql -p'1234' --database='meditrack' < /MediTrack/MediTrackBackend/Migrations/init.sql

      
        # Run the initial setup script
        sudo chmod +x /vagrant/init-scripts/init-db-server.sh
        /bin/sh /vagrant/init-scripts/init-db-server.sh
      SHELL
    end
  end

  # Authentication Server
  config.vm.define "auth_server" do |auth_config|
    auth_config.vm.box = "ubuntu/focal64"
    auth_config.vm.hostname = "a31-MediTrack-auth-server"
    auth_config.vm.network "private_network", type: "static", ip: "192.168.2.100", virtualbox__intnet: "sw-0", auto_config: false
    # client_config.vm.network "public_network", type: "static", ip: "192.168.4.50", 

    # VM name
    auth_config.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.name = "a31-MediTrack-auth-server"
    end

    # Create shared folder for compiling auth server code
    auth_config.vm.synced_folder "../MediTrack", "/MediTrack"

    # Install .NET and compile project
    auth_config.vm.provision "shell" do |shell|
      shell.inline = <<-SHELL
        # Ensure script has correct line endings for unix
        sudo apt install dos2unix && dos2unix /vagrant/init-scripts/init-auth-server.sh #!

        # Run initial setup script
        sudo chmod +x /vagrant/init-scripts/init-auth-server.sh
        /bin/sh /vagrant/init-scripts/init-auth-server.sh

        # Do necessary installations
        sudo apt update
        wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
        chmod +x ./dotnet-install.sh
        /bin/bash ./dotnet-install.sh --version latest --install-dir /usr/local/bin

        echo "export DOTNET_ROOT=/usr/local/bin" >> /home/vagrant/.bashrc
        echo "export PATH=$PATH:$DOTNET_ROOT" >> /home/vagrant/.bashrc

        # Change to the AuthServer directory, publish the .NET program, and change back to the parent directory
        # cd /AuthServer && dotnet publish -o ../AuthServerApp && cd ..

        # Start running the program
        # screen -dm /AuthServerApp/AuthServer
      SHELL
    end
  end

  # Client Machine
  config.vm.define "client_machine" do |client_config|
    client_config.vm.box = "ubuntu/focal64"
    client_config.vm.hostname = "a31-MediTrack-client-machine"
    client_config.vm.network "private_network", type: "static", ip: "192.168.2.50", virtualbox__intnet: "sw-0", auto_config: false

    # VM name
    client_config.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.name = "a31-MediTrack-client-machine"
    end

    # Create shared folder for compiling client code
    client_config.vm.synced_folder "../MediTrack", "/MediTrack"

    client_config.vm.provision "shell" do |shell|
      shell.inline = <<-SHELL

        # Ensure script has correct line endings for unix
        sudo apt install dos2unix && dos2unix /vagrant/init-scripts/init-client-machine.sh #!

        # Run initial setup script
        sudo chmod +x /vagrant/init-scripts/init-client-machine.sh
        /bin/sh /vagrant/init-scripts/init-client-machine.sh

        # Do necessary installations
        sudo apt update
        wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
        chmod +x ./dotnet-install.sh
        /bin/bash ./dotnet-install.sh --version latest --install-dir /usr/local/bin

        echo "export DOTNET_ROOT=/usr/local/bin" >> /home/vagrant/.bashrc
        echo "export PATH=$PATH:$DOTNET_ROOT" >> /home/vagrant/.bashrc

        # Ensure script has correct line endings for unix
        #sudo apt install dos2unix && dos2unix /vagrant/init-scripts/init-client-machine.sh

        # Compile the Client code
        # cd /MediTrack/Client && dotnet publish -o ../../ClientApp && cd ../..

        # Start running the program
        # /ClientApp/Client
      SHELL
    end
  end
end
