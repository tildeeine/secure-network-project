// <auto-generated />
using MediTrack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediTrackBackend.Migrations
{
    [DbContext(typeof(MediTrackDb))]
    partial class MediTrackDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MediTrack.Data.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KnownAllergies")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("NIC")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BloodType = "O-",
                            DateOfBirth = "2001-07-21",
                            KnownAllergies = "[\"Chocolate\"]",
                            NIC = "000000000",
                            Name = "Bob",
                            PublicKey = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArzlh7J0ffHNn+aq2dijR\nLXs4MAGopAZhguwlvlWvWQ0uhPkONoz/Znda4RgAUmPSMbkGdnTT8rr8/7Imlwon\ni0n42U0i+UVJg12TObu7pTnVj5xsdsSu865r1d3fdVOSMAkDD183PILI6xzLKjoe\nCZtUTlg5oL5khL+cx9ofX3ofShMoYqQKpCK1bzstLQS53r05oFHG9YlbUHnGqGyH\n7J+kJgkIqjRHVV5Aoon8Lcd9zn85DP258QBgDyJNWA48ZE6k9XvnOtW587/SWRxW\n6DrJfwxvykuAFKS2t4mM/eeAxTiMo0nLLVBuAJ4QYkBqFP9/tB6dtBqRE/gYlINq\npwIDAQAB\n-----END PUBLIC KEY-----",
                            Sex = "Male"
                        });
                });

            modelBuilder.Entity("MediTrack.Data.Patient", b =>
                {
                    b.OwnsMany("MediTrack.Data.Consultation", "ConsultationRecords", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Date")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("DoctorName")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("MedicalSpeciality")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("NIC")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PhysicianSignature")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Practice")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("TreatmentSummary")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("PatientId", "Id");

                            b1.ToTable("Consultation");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.HasData(
                                new
                                {
                                    PatientId = -1,
                                    Id = -2,
                                    Date = "2023-02-02",
                                    DoctorName = "Bob",
                                    MedicalSpeciality = "Orthopedic",
                                    NIC = "000000000",
                                    PhysicianSignature = "e2LsTkrtPjE44NMyJzO9znj6unWOVPNZWvuG6P4eEGQbnP5ZxysBSsqUQNfDaySwXdsW6+iYXVxYQK/ZNbesqaGz8Hrtd1X+bHxSKLdQV1Vkw2Jpvr/MVPnBgVUbHL81KqdNk/g7wTwZ+8LWTf5sOdJGHIVX+QmWu41P3jbw6D1Q2yXzCWfqhHyUtHu8kgqZmUYijfwmF3s4A5zcYQxxqjXRc8XIjjuMT+iEfcIUulBuW5jPH5M8Oav2Lwqx+BQkNSXFzfKCWyfZGtMxMNNwTMxouOu/JSLX/OvjB07UVHVyMvEdcDmnvrQQl6I/ZkRbqzSXgnSejUviueAGmXguvw==",
                                    Practice = "Clinica",
                                    TreatmentSummary = "Pomade"
                                },
                                new
                                {
                                    PatientId = -1,
                                    Id = -1,
                                    Date = "2023-02-02",
                                    DoctorName = "Charlie",
                                    MedicalSpeciality = "Neuro",
                                    NIC = "000000001",
                                    PhysicianSignature = "LOxx3nCQU7oHRHeiPgQtqWxDiwoZbfOkhBvtyDuLxKx5PwQE/sm9xsaQwVCns55B43Sz0s7FYNx27feGFZThfDg0HJnYMxL7T56XP80GSWwZHeJWevE9QjJNmE6cIG+c11BjVytRnACbC+IUBgoa+NFzNk23w04lseZd/2GJGl9GON7qiUssYTvZY03zHiMHjp79GYS6BcVHCWBFBZMVNEOujVpWBPd4jOlFwlSxjtzSAlgqBolArAHDO1BdWUmUPHVsCKJ9FVRDno0qYn64OgL2kkIPupqZ9TQftM6hi80vZalJKK7xRyijc09lmZs/53DegXJ6wbntzJOIHmUPYQ==",
                                    Practice = "Clinica",
                                    TreatmentSummary = "Pomade"
                                });
                        });

                    b.Navigation("ConsultationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
